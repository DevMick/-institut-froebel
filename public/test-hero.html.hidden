<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test Hero Video - Institut Froebel</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #00A86B;
            text-align: center;
            margin-bottom: 30px;
        }
        .test-section {
            margin: 20px 0;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #fafafa;
        }
        button {
            background-color: #00A86B;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin: 5px;
        }
        button:hover {
            background-color: #008f5a;
        }
        button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
        .log-output {
            background-color: #1e1e1e;
            color: #00ff00;
            padding: 15px;
            border-radius: 5px;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            max-height: 400px;
            overflow-y: auto;
            margin-top: 15px;
            white-space: pre-wrap;
        }
        .status {
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
            font-weight: bold;
        }
        .status.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .status.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .status.info {
            background-color: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üß™ Test Automatis√© - Vid√©o Hero</h1>
        
        <div class="test-section">
            <h3>üìä Tests Disponibles</h3>
            <p>Ces tests v√©rifient automatiquement si le syst√®me de changement de vid√©o Hero fonctionne correctement.</p>
            
            <button onclick="runVideoChangeTest()">üé• Test Changement Vid√©o</button>
            <button onclick="runUrlValidationTest()">üîç Test Validation URLs</button>
            <button onclick="runAllTests()">üöÄ Ex√©cuter Tous les Tests</button>
            <button onclick="clearLogs()">üßπ Effacer les Logs</button>
        </div>

        <div class="test-section">
            <h3>üìã Instructions</h3>
            <ol>
                <li><strong>Ouvrez la console d√©veloppeur</strong> (F12)</li>
                <li><strong>Cliquez sur un bouton de test</strong> ci-dessus</li>
                <li><strong>Observez les r√©sultats</strong> dans la console et ci-dessous</li>
                <li><strong>V√©rifiez le statut</strong> des tests</li>
            </ol>
        </div>

        <div id="status-container"></div>
        <div id="log-container"></div>
    </div>

    <script>
        // Simulation des fonctions de test (√† adapter selon votre impl√©mentation)
        
        // Fonction pour simuler fetchHomeData
        const mockFetchHomeData = async () => {
            return {
                success: true,
                data: {
                    hero: {
                        title: "L'√âDUCATION D'AUJOURD'HUI, LES LEADERS DE DEMAIN.",
                        videoUrl: "https://res.cloudinary.com/dntyghmap/video/upload/v1755144106/Spot_Ecole_hrko3u.mp4",
                        messages: ["Test message 1", "Test message 2"],
                        badges: [
                            { text: "Maternelle ‚Ä¢ Primaire ‚Ä¢ Secondaire" },
                            { text: "Excellence P√©dagogique" }
                        ]
                    }
                }
            };
        };

        // Fonction pour simuler saveHomeData
        const mockSaveHomeData = async (data) => {
            // Simuler la sauvegarde dans localStorage
            localStorage.setItem('homePageData', JSON.stringify(data));
            return { success: true, message: 'Donn√©es sauvegard√©es avec succ√®s' };
        };

        // Fonction de test du changement de vid√©o
        async function testVideoChange() {
            logMessage('üß™ === D√âBUT TEST CHANGEMENT VID√âO ===');
            
            try {
                // 1. R√©cup√©rer les donn√©es actuelles
                logMessage('üìä R√©cup√©ration des donn√©es actuelles...');
                const currentData = await mockFetchHomeData();
                const originalUrl = currentData.data.hero.videoUrl;
                logMessage('üé• URL actuelle: ' + originalUrl);
                
                // 2. Tester avec une nouvelle URL
                const testUrl = 'https://res.cloudinary.com/dntyghmap/video/upload/v1757153869/TEST_' + Date.now() + '.mp4';
                logMessage('üîÑ URL de test: ' + testUrl);
                
                // 3. Sauvegarder
                const updatedData = {
                    ...currentData.data,
                    hero: { ...currentData.data.hero, videoUrl: testUrl }
                };
                
                const saveResult = await mockSaveHomeData(updatedData);
                if (!saveResult.success) {
                    throw new Error('√âchec sauvegarde');
                }
                logMessage('‚úÖ Sauvegarde r√©ussie');
                
                // 4. V√©rifier
                const stored = localStorage.getItem('homePageData');
                const parsedData = JSON.parse(stored);
                const savedUrl = parsedData.hero.videoUrl;
                
                if (savedUrl === testUrl) {
                    logMessage('‚úÖ TEST R√âUSSI: Vid√©o correctement sauvegard√©e');
                    showStatus('Test Changement Vid√©o: R√âUSSI', 'success');
                    return true;
                } else {
                    logMessage('‚ùå TEST √âCHOU√â: URLs ne correspondent pas');
                    showStatus('Test Changement Vid√©o: √âCHOU√â', 'error');
                    return false;
                }
                
            } catch (error) {
                logMessage('üí• ERREUR: ' + error.message);
                showStatus('Test Changement Vid√©o: ERREUR - ' + error.message, 'error');
                return false;
            }
        }

        // Fonction de test de validation des URLs
        function testUrlValidation() {
            logMessage('üß™ === TEST VALIDATION URLs ===');
            
            const testUrls = [
                { url: 'https://res.cloudinary.com/test/video.mp4', expected: true, desc: 'Cloudinary' },
                { url: 'https://www.youtube.com/watch?v=test', expected: true, desc: 'YouTube' },
                { url: 'https://vimeo.com/123456', expected: true, desc: 'Vimeo' },
                { url: 'invalid-url', expected: false, desc: 'URL invalide' },
                { url: '', expected: false, desc: 'URL vide' }
            ];
            
            let allPassed = true;
            
            testUrls.forEach((test, index) => {
                const isValid = test.url.includes('cloudinary') || 
                               test.url.includes('youtube') || 
                               test.url.includes('vimeo');
                
                if (isValid === test.expected) {
                    logMessage(`‚úÖ Test ${index + 1}: ${test.desc} - R√âUSSI`);
                } else {
                    logMessage(`‚ùå Test ${index + 1}: ${test.desc} - √âCHOU√â`);
                    allPassed = false;
                }
            });
            
            if (allPassed) {
                logMessage('üéâ TOUS LES TESTS DE VALIDATION R√âUSSIS');
                showStatus('Test Validation URLs: R√âUSSI', 'success');
            } else {
                logMessage('‚ùå CERTAINS TESTS DE VALIDATION √âCHOU√âS');
                showStatus('Test Validation URLs: √âCHOU√â', 'error');
            }
            
            return allPassed;
        }

        // Fonctions d'interface
        async function runVideoChangeTest() {
            clearStatus();
            showStatus('Test en cours...', 'info');
            await testVideoChange();
        }

        function runUrlValidationTest() {
            clearStatus();
            showStatus('Test en cours...', 'info');
            testUrlValidation();
        }

        async function runAllTests() {
            clearStatus();
            clearLogs();
            showStatus('Ex√©cution de tous les tests...', 'info');
            
            logMessage('üöÄ === D√âBUT DE TOUS LES TESTS ===');
            
            const videoResult = await testVideoChange();
            const urlResult = testUrlValidation();
            
            logMessage('üìä === R√âSUM√â ===');
            logMessage('Changement vid√©o: ' + (videoResult ? '‚úÖ R√âUSSI' : '‚ùå √âCHOU√â'));
            logMessage('Validation URLs: ' + (urlResult ? '‚úÖ R√âUSSI' : '‚ùå √âCHOU√â'));
            
            if (videoResult && urlResult) {
                showStatus('TOUS LES TESTS R√âUSSIS! üéâ', 'success');
            } else {
                showStatus('CERTAINS TESTS ONT √âCHOU√â ‚ùå', 'error');
            }
        }

        function logMessage(message) {
            console.log(message);
            
            let logContainer = document.getElementById('log-container');
            if (!logContainer.querySelector('.log-output')) {
                logContainer.innerHTML = '<div class="log-output"></div>';
            }
            
            const logOutput = logContainer.querySelector('.log-output');
            logOutput.textContent += new Date().toLocaleTimeString() + ' - ' + message + '\n';
            logOutput.scrollTop = logOutput.scrollHeight;
        }

        function showStatus(message, type) {
            const statusContainer = document.getElementById('status-container');
            statusContainer.innerHTML = `<div class="status ${type}">${message}</div>`;
        }

        function clearStatus() {
            document.getElementById('status-container').innerHTML = '';
        }

        function clearLogs() {
            const logContainer = document.getElementById('log-container');
            logContainer.innerHTML = '';
        }

        // Message d'accueil
        logMessage('üè† Page de test Hero charg√©e - Pr√™t pour les tests!');
        showStatus('Pr√™t pour les tests - Cliquez sur un bouton ci-dessus', 'info');
    </script>
</body>
</html>
